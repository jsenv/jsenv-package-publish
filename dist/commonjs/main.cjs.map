{
  "version": 3,
  "file": "main.cjs",
  "sources": [
    "../../src/internal/fetchLatestInRegistry.js",
    "../../src/internal/setNpmConfig.js",
    "../../src/internal/publish.js",
    "../../src/internal/readProjectPackage.js",
    "../../node_modules/@jsenv/core/src/internal/import-meta/import-meta-url-commonjs.js",
    "../../src/internal/needsPublish.js",
    "../../src/publishPackage.js"
  ],
  "sourcesContent": [
    "// https://github.com/npm/registry/blob/master/docs/REGISTRY-API.md#getpackageversion\n// https://github.com/npm/registry-issue-archive/issues/34\n// https://stackoverflow.com/questions/53212849/querying-information-about-specific-version-of-scoped-npm-package\n\nimport { fetchUrl } from \"@jsenv/server\"\n\nexport const fetchLatestInRegistry = async ({ registryUrl, packageName, token }) => {\n  const requestUrl = `${registryUrl}/${packageName}`\n  const response = await fetchUrl(requestUrl, {\n    method: \"GET\",\n    headers: {\n      // \"user-agent\": \"jsenv\",\n      accept: \"application/vnd.npm.install-v1+json; q=1.0, application/json; q=0.8, */*\",\n      ...(token ? { authorization: `token ${token}` } : {}),\n    },\n  })\n\n  const responseStatus = response.status\n\n  if (responseStatus === 404) {\n    return null\n  }\n\n  if (responseStatus !== 200) {\n    throw new Error(\n      writeUnexpectedResponseStatus({\n        requestUrl,\n        responseStatus,\n        responseText: await response.text(),\n      }),\n    )\n  }\n\n  const packageObject = await response.json()\n  return packageObject.versions[packageObject[\"dist-tags\"].latest]\n}\n\nconst writeUnexpectedResponseStatus = ({\n  requestUrl,\n  responseStatus,\n  responseText,\n}) => `package registry response status should be 200.\n--- request url ----\n${requestUrl}\n--- response status ---\n${responseStatus}\n--- response text ---\n${responseText}`\n",
    "export const setNpmConfig = (configString, configObject) => {\n  return Object.keys(configObject).reduce((previous, key) => {\n    return setOrUpdateNpmConfig(previous, key, configObject[key])\n  }, configString)\n}\n\nconst setOrUpdateNpmConfig = (config, key, value) => {\n  const assignmentIndex = config.indexOf(`${key}=`)\n  if (assignmentIndex === -1) {\n    if (config === \"\") {\n      return `${key}=${value}`\n    }\n    return `${config}\n${key}=${value}`\n  }\n\n  const beforeAssignment = config.slice(0, assignmentIndex)\n  const nextLineIndex = config.indexOf(\"\\n\", assignmentIndex)\n  if (nextLineIndex === -1) {\n    return `${beforeAssignment}${key}=${value}`\n  }\n\n  const afterAssignment = config.slice(nextLineIndex)\n  return `${beforeAssignment}${key}=${value}${afterAssignment}`\n}\n",
    "import { exec } from \"child_process\"\nimport { resolveUrl, urlToFileSystemPath, readFile, writeFile } from \"@jsenv/util\"\nimport { setNpmConfig } from \"./setNpmConfig.js\"\n\nexport const publish = async ({\n  logger,\n  logNpmPublishOutput,\n  projectDirectoryUrl,\n  registryUrl,\n  token,\n}) => {\n  try {\n    const promises = []\n\n    const previousValue = process.env.NODE_AUTH_TOKEN\n    const restoreProcessEnv = () => {\n      process.env.NODE_AUTH_TOKEN = previousValue\n    }\n    process.env.NODE_AUTH_TOKEN = token\n\n    const projectPackageFileUrl = resolveUrl(\"./package.json\", projectDirectoryUrl)\n    const projectPackageString = await readFile(projectPackageFileUrl)\n    const restoreProjectPackageFile = () => writeFile(projectPackageFileUrl, projectPackageString)\n    const projectPackageObject = JSON.parse(projectPackageString)\n    projectPackageObject.publishConfig = projectPackageObject.publishConfig || {}\n    projectPackageObject.publishConfig.registry = registryUrl\n    promises.push(\n      writeFile(projectPackageFileUrl, JSON.stringify(projectPackageObject, null, \"  \")),\n    )\n\n    const projectNpmConfigFileUrl = resolveUrl(\"./.npmrc\", projectDirectoryUrl)\n    let projectNpmConfigString\n    try {\n      projectNpmConfigString = await readFile(projectNpmConfigFileUrl)\n    } catch (e) {\n      if (e.code === \"ENOENT\") {\n        projectNpmConfigString = \"\"\n      } else {\n        throw e\n      }\n    }\n    const restoreProjectNpmConfigFile = () =>\n      writeFile(projectNpmConfigFileUrl, projectNpmConfigString)\n    promises.push(\n      writeFile(\n        projectNpmConfigFileUrl,\n        setNpmConfig(projectNpmConfigString, {\n          [computeRegistryTokenKey(registryUrl)]: token,\n          [computeRegistryKey(projectPackageObject.name)]: registryUrl,\n        }),\n      ),\n    )\n\n    await Promise.all(promises)\n\n    try {\n      return await new Promise((resolve, reject) => {\n        const command = exec(\n          \"npm publish\",\n          {\n            cwd: urlToFileSystemPath(projectDirectoryUrl),\n            stdio: \"silent\",\n          },\n          (error) => {\n            if (error) {\n              // publish conflict generally occurs because servers\n              // returns 200 after npm publish\n              // but returns previous version if asked immediatly\n              // after for the last published version.\n\n              // npm publish conclit\n              if (error.message.includes(\"EPUBLISHCONFLICT\")) {\n                resolve({\n                  success: true,\n                  reason: \"already-published\",\n                })\n              } else if (error.message.includes(\"Cannot publish over existing version\")) {\n                resolve({\n                  success: true,\n                  reason: \"already-published\",\n                })\n              } else if (\n                error.message.includes(\"You cannot publish over the previously published versions\")\n              ) {\n                resolve({\n                  success: true,\n                  reason: \"already-published\",\n                })\n              }\n              // github publish conflict\n              else if (error.message.includes(\"ambiguous package version in package.json\")) {\n                resolve({\n                  success: true,\n                  reason: \"already-published\",\n                })\n              } else {\n                reject(error)\n              }\n            } else {\n              resolve({\n                success: true,\n                reason: \"published\",\n              })\n            }\n          },\n        )\n        if (logNpmPublishOutput) {\n          command.stdout.on(\"data\", (data) => {\n            logger.debug(data)\n          })\n          command.stderr.on(\"data\", (data) => {\n            // debug because this output is part of\n            // the error message generated by a failing npm publish\n            logger.debug(data)\n          })\n        }\n      })\n    } finally {\n      await Promise.all([\n        restoreProcessEnv(),\n        restoreProjectPackageFile(),\n        restoreProjectNpmConfigFile(),\n      ])\n    }\n  } catch (e) {\n    return {\n      success: false,\n      reason: e,\n    }\n  }\n}\n\nconst computeRegistryTokenKey = (registryUrl) => {\n  if (registryUrl.startsWith(\"http://\")) {\n    return `${registryUrl.slice(\"http:\".length)}/:_authToken`\n  }\n  if (registryUrl.startsWith(\"https://\")) {\n    return `${registryUrl.slice(\"https:\".length)}/:_authToken`\n  }\n  if (registryUrl.startsWith(\"//\")) {\n    return `${registryUrl}/:_authToken`\n  }\n  throw new Error(`registryUrl must start with http or https, got ${registryUrl}`)\n}\n\nconst computeRegistryKey = (packageName) => {\n  if (packageName[0] === \"@\") {\n    const packageScope = packageName.slice(0, packageName.indexOf(\"/\"))\n    return `${packageScope}:registry`\n  }\n  return `registry`\n}\n",
    "import { resolveUrl, urlToFileSystemPath, readFile } from \"@jsenv/util\"\n\nexport const readProjectPackage = async ({ projectDirectoryUrl }) => {\n  const packageFileUrl = resolveUrl(\"./package.json\", projectDirectoryUrl)\n\n  let packageObject\n  try {\n    const packageString = await readFile(packageFileUrl)\n    try {\n      packageObject = JSON.parse(packageString)\n    } catch (e) {\n      if (e.name === \"SyntaxError\") {\n        throw new Error(`syntax error while parsing project package.json\n--- syntax error stack ---\n${e.stack}\n--- package.json path ---\n${urlToFileSystemPath(packageFileUrl)}`)\n      }\n      throw e\n    }\n  } catch (e) {\n    if (e.code === \"ENOENT\") {\n      throw new Error(\n        `cannot find project package.json\n--- package.json path ---\n${urlToFileSystemPath(packageFileUrl)}`,\n      )\n    }\n    throw e\n  }\n\n  return packageObject\n}\n",
    "/* global __filename */\n\nconst filenameContainsBackSlashes = __filename.indexOf(\"\\\\\") > -1\n\nconst url = filenameContainsBackSlashes\n  ? `file:///${__filename.replace(/\\\\/g, \"/\")}`\n  : `file://${__filename}`\n\nexport default url\n",
    "import { createRequire } from \"module\"\n\nconst require = createRequire(import.meta.url)\n// https://github.com/npm/node-semver#readme\nconst { gt: versionGreaterThan, prerelease: versionToPrerelease } = require(\"semver\")\n\nexport const PUBLISH_BECAUSE_NEVER_PUBLISHED = \"never-published\"\nexport const PUBLISH_BECAUSE_LATEST_LOWER = \"latest-lower\"\nexport const PUBLISH_BECAUSE_TAG_DIFFERS = \"tag-differs\"\n\nexport const NOTHING_BECAUSE_LATEST_HIGHER = \"latest-higher\"\nexport const NOTHING_BECAUSE_ALREADY_PUBLISHED = \"already-published\"\n\nexport const needsPublish = ({ registryLatestVersion, packageVersion }) => {\n  if (registryLatestVersion === null) {\n    return PUBLISH_BECAUSE_NEVER_PUBLISHED\n  }\n\n  if (registryLatestVersion === packageVersion) {\n    return NOTHING_BECAUSE_ALREADY_PUBLISHED\n  }\n\n  if (versionGreaterThan(registryLatestVersion, packageVersion)) {\n    return NOTHING_BECAUSE_LATEST_HIGHER\n  }\n\n  const registryLatestVersionPrerelease = versionToPrerelease(registryLatestVersion)\n  const packageVersionPrerelease = versionToPrerelease(packageVersion)\n  if (registryLatestVersionPrerelease === null && packageVersionPrerelease === null) {\n    return PUBLISH_BECAUSE_LATEST_LOWER\n  }\n\n  if (registryLatestVersionPrerelease === null && packageVersionPrerelease !== null) {\n    return PUBLISH_BECAUSE_LATEST_LOWER\n  }\n\n  if (registryLatestVersionPrerelease !== null && packageVersionPrerelease === null) {\n    return PUBLISH_BECAUSE_LATEST_LOWER\n  }\n\n  const [registryReleaseTag, registryPrereleaseVersion] = registryLatestVersionPrerelease\n  const [packageReleaseTag, packagePreReleaseVersion] = packageVersionPrerelease\n\n  if (registryReleaseTag !== packageReleaseTag) {\n    return PUBLISH_BECAUSE_TAG_DIFFERS\n  }\n\n  if (registryPrereleaseVersion === packagePreReleaseVersion) {\n    return NOTHING_BECAUSE_ALREADY_PUBLISHED\n  }\n\n  if (registryPrereleaseVersion > packagePreReleaseVersion) {\n    return NOTHING_BECAUSE_LATEST_HIGHER\n  }\n\n  return PUBLISH_BECAUSE_LATEST_LOWER\n}\n",
    "import { createLogger } from \"@jsenv/logger\"\nimport { createCancellationTokenForProcess, executeAsyncFunction } from \"@jsenv/cancellation\"\nimport { assertAndNormalizeDirectoryUrl } from \"@jsenv/util\"\nimport { fetchLatestInRegistry } from \"./internal/fetchLatestInRegistry.js\"\nimport { publish } from \"./internal/publish.js\"\nimport { readProjectPackage } from \"./internal/readProjectPackage.js\"\nimport {\n  needsPublish,\n  PUBLISH_BECAUSE_NEVER_PUBLISHED,\n  PUBLISH_BECAUSE_LATEST_LOWER,\n  PUBLISH_BECAUSE_TAG_DIFFERS,\n  NOTHING_BECAUSE_LATEST_HIGHER,\n  NOTHING_BECAUSE_ALREADY_PUBLISHED,\n} from \"../src/internal/needsPublish.js\"\n\nexport const publishPackage = async ({\n  cancellationToken = createCancellationTokenForProcess(),\n  logLevel,\n  projectDirectoryUrl,\n  registriesConfig,\n  logNpmPublishOutput = true,\n  updateProcessExitCode = true,\n} = {}) => {\n  return executeAsyncFunction(\n    async () => {\n      const logger = createLogger({ logLevel })\n      logger.debug(\n        `publishPackage(${JSON.stringify(\n          { projectDirectoryUrl, logLevel, registriesConfig },\n          null,\n          \"  \",\n        )})`,\n      )\n      projectDirectoryUrl = assertAndNormalizeDirectoryUrl(projectDirectoryUrl)\n      assertRegistriesConfig(registriesConfig)\n\n      logger.debug(`reading project package.json`)\n      const packageInProject = await readProjectPackage({\n        projectDirectoryUrl,\n      })\n      const { name: packageName, version: packageVersion } = packageInProject\n      logger.info(`${packageName}@${packageVersion} found in package.json`)\n\n      const report = {}\n      await Promise.all(\n        Object.keys(registriesConfig).map(async (registryUrl) => {\n          const registryReport = {\n            packageName,\n            packageVersion,\n            registryLatestVersion: undefined,\n            action: undefined,\n            actionReason: undefined,\n            actionResult: undefined,\n          }\n          report[registryUrl] = registryReport\n\n          logger.debug(`check latest version for ${packageName} in ${registryUrl}`)\n          const registryConfig = registriesConfig[registryUrl]\n\n          try {\n            const latestPackageInRegistry = await fetchLatestInRegistry({\n              registryUrl,\n              packageName,\n              ...registryConfig,\n            })\n            const registryLatestVersion =\n              latestPackageInRegistry === null ? null : latestPackageInRegistry.version\n            registryReport.registryLatestVersion = registryLatestVersion\n\n            const needs = needsPublish({ packageVersion, registryLatestVersion })\n            registryReport.action =\n              needs === PUBLISH_BECAUSE_NEVER_PUBLISHED ||\n              needs === PUBLISH_BECAUSE_LATEST_LOWER ||\n              needs === PUBLISH_BECAUSE_TAG_DIFFERS\n                ? \"publish\"\n                : \"nothing\"\n            registryReport.actionReason = needs\n          } catch (e) {\n            registryReport.action = \"nothing\"\n            registryReport.actionReason = e\n            if (updateProcessExitCode) {\n              process.exitCode = 1\n            }\n          }\n\n          cancellationToken.throwIfRequested()\n        }),\n      )\n\n      // we have to publish in serie because we don't fully control\n      // npm publish, we have to enforce where the package gets published\n      await Object.keys(report).reduce(async (previous, registryUrl) => {\n        await previous\n        cancellationToken.throwIfRequested()\n\n        const registryReport = report[registryUrl]\n        const { action, actionReason, registryLatestVersion } = registryReport\n\n        if (action === \"nothing\") {\n          if (actionReason === NOTHING_BECAUSE_ALREADY_PUBLISHED) {\n            logger.info(\n              `skip ${packageName}@${packageVersion} publish on ${registryUrl} because already published`,\n            )\n          } else if (actionReason === NOTHING_BECAUSE_LATEST_HIGHER) {\n            logger.info(\n              `skip ${packageName}@${packageVersion} publish on ${registryUrl} because latest version is higher (${registryLatestVersion})`,\n            )\n          } else {\n            logger.error(`skip ${packageName}@${packageVersion} publish on ${registryUrl} due to error while fetching latest version.\n--- error stack ---\n${actionReason.stack}`)\n          }\n\n          registryReport.actionResult = { success: true, reason: \"nothing-to-do\" }\n          return\n        }\n\n        if (actionReason === PUBLISH_BECAUSE_NEVER_PUBLISHED) {\n          logger.info(\n            `publish ${packageName}@${packageVersion} on ${registryUrl} because it was never published`,\n          )\n        } else if (actionReason === PUBLISH_BECAUSE_LATEST_LOWER) {\n          logger.info(\n            `publish ${packageName}@${packageVersion} on ${registryUrl} because latest version is lower (${registryLatestVersion})`,\n          )\n        } else if (actionReason === PUBLISH_BECAUSE_TAG_DIFFERS) {\n          logger.info(\n            `publish ${packageName}@${packageVersion} on ${registryUrl} because latest tag differs (${registryLatestVersion})`,\n          )\n        }\n\n        const { success, reason } = await publish({\n          logger,\n          logNpmPublishOutput,\n          projectDirectoryUrl,\n          registryUrl,\n          ...registriesConfig[registryUrl],\n        })\n        registryReport.actionResult = { success, reason }\n        if (success) {\n          if (reason === \"already-published\") {\n            logger.info(`${packageName}@${packageVersion} was already published on ${registryUrl}`)\n          } else {\n            logger.info(`${packageName}@${packageVersion} published on ${registryUrl}`)\n          }\n        } else {\n          logger.error(`error when publishing ${packageName}@${packageVersion} in ${registryUrl}\n--- error stack ---\n${reason.stack}`)\n          if (updateProcessExitCode) {\n            process.exitCode = 1\n          }\n        }\n      }, Promise.resolve())\n\n      return report\n    },\n    { catchCancellation: true, considerUnhandledRejectionsAsExceptions: true },\n  )\n}\n\nconst assertRegistriesConfig = (value) => {\n  if (typeof value !== \"object\") {\n    throw new TypeError(`registriesConfig must be an object.\n--- registryMap ---\n${value}`)\n  }\n\n  Object.keys(value).forEach((registryUrl) => {\n    const registryMapValue = value[registryUrl]\n    if (typeof registryMapValue !== \"object\") {\n      throw new TypeError(`found unexpected registryMap value: it must be an object.\n--- registryMap value ---\n${registryMapValue}\n--- registryMap key ---\n${registryUrl}`)\n    }\n\n    if (`token` in registryMapValue === false) {\n      throw new TypeError(`missing token in registryMap.\n--- registryMap key ---\n${registryUrl}`)\n    }\n\n    if (typeof registryMapValue.token !== \"string\") {\n      throw new TypeError(`unexpected token found in registryMap: it must be a string.\n--- token ---\n${registryMapValue.token}\n--- registryMap key ---\n${registryUrl}`)\n    }\n  })\n}\n"
  ],
  "names": [
    "fetchLatestInRegistry",
    "registryUrl",
    "packageName",
    "token",
    "requestUrl",
    "response",
    "fetchUrl",
    "method",
    "headers",
    "accept",
    "authorization",
    "responseStatus",
    "status",
    "Error",
    "writeUnexpectedResponseStatus",
    "responseText",
    "text",
    "packageObject",
    "json",
    "versions",
    "latest",
    "setNpmConfig",
    "configString",
    "configObject",
    "Object",
    "keys",
    "reduce",
    "previous",
    "key",
    "setOrUpdateNpmConfig",
    "config",
    "value",
    "assignmentIndex",
    "indexOf",
    "beforeAssignment",
    "slice",
    "nextLineIndex",
    "afterAssignment",
    "publish",
    "logger",
    "logNpmPublishOutput",
    "projectDirectoryUrl",
    "promises",
    "previousValue",
    "process",
    "env",
    "NODE_AUTH_TOKEN",
    "restoreProcessEnv",
    "projectPackageFileUrl",
    "resolveUrl",
    "projectPackageString",
    "readFile",
    "restoreProjectPackageFile",
    "writeFile",
    "projectPackageObject",
    "JSON",
    "parse",
    "publishConfig",
    "registry",
    "push",
    "stringify",
    "projectNpmConfigFileUrl",
    "projectNpmConfigString",
    "e",
    "code",
    "restoreProjectNpmConfigFile",
    "computeRegistryTokenKey",
    "computeRegistryKey",
    "name",
    "Promise",
    "all",
    "resolve",
    "reject",
    "command",
    "exec",
    "cwd",
    "urlToFileSystemPath",
    "stdio",
    "error",
    "message",
    "includes",
    "success",
    "reason",
    "stdout",
    "on",
    "data",
    "debug",
    "stderr",
    "startsWith",
    "length",
    "packageScope",
    "readProjectPackage",
    "packageFileUrl",
    "packageString",
    "stack",
    "filenameContainsBackSlashes",
    "__filename",
    "url",
    "replace",
    "require",
    "createRequire",
    "gt",
    "versionGreaterThan",
    "prerelease",
    "versionToPrerelease",
    "PUBLISH_BECAUSE_NEVER_PUBLISHED",
    "PUBLISH_BECAUSE_LATEST_LOWER",
    "PUBLISH_BECAUSE_TAG_DIFFERS",
    "NOTHING_BECAUSE_LATEST_HIGHER",
    "NOTHING_BECAUSE_ALREADY_PUBLISHED",
    "needsPublish",
    "registryLatestVersion",
    "packageVersion",
    "registryLatestVersionPrerelease",
    "packageVersionPrerelease",
    "registryReleaseTag",
    "registryPrereleaseVersion",
    "packageReleaseTag",
    "packagePreReleaseVersion",
    "publishPackage",
    "cancellationToken",
    "createCancellationTokenForProcess",
    "logLevel",
    "registriesConfig",
    "updateProcessExitCode",
    "executeAsyncFunction",
    "createLogger",
    "assertAndNormalizeDirectoryUrl",
    "assertRegistriesConfig",
    "packageInProject",
    "version",
    "info",
    "report",
    "map",
    "registryReport",
    "undefined",
    "action",
    "actionReason",
    "actionResult",
    "registryConfig",
    "latestPackageInRegistry",
    "needs",
    "exitCode",
    "throwIfRequested",
    "catchCancellation",
    "considerUnhandledRejectionsAsExceptions",
    "TypeError",
    "forEach",
    "registryMapValue"
  ],
  "mappings": "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"
}